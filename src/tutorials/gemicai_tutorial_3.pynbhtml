
<body class="jp-Notebook" data-jp-theme-light="true" data-jp-theme-name="JupyterLab Light">

<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<h1 id="Gemicai-tutorial-3:-Gemicai-Dataset">Gemicai tutorial 3: Gemicai Dataset<a class="anchor-link" href="#Gemicai-tutorial-3:-Gemicai-Dataset">&#182;</a></h1><p>This tutorial is about Gemicai datasets, or gemsets for short.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell jp-mod-noOutputs  ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[23]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">gemicai</span> <span class="k">as</span> <span class="nn">gem</span>
<span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torchvision.models</span> <span class="k">as</span> <span class="nn">models</span>
<span class="kn">import</span> <span class="nn">os</span>
</pre></div>

     </div>
</div>
</div>
</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<h2 id="3.1-Create-gemset">3.1 Create gemset<a class="anchor-link" href="#3.1-Create-gemset">&#182;</a></h2><p>In order to train models using Gemicai library we have to first create a dataset from the Dicom files. Luckily Gemicai provides some functionality that handle most of the works for us.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[17]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Path to a folder containing files in a dicom format</span>
<span class="n">dicom_data</span> <span class="o">=</span> <span class="s1">&#39;examples/dicom/CT&#39;</span>

<span class="c1"># Path to a folder where the processed data sets will be stored</span>
<span class="n">gemset_destination</span> <span class="o">=</span> <span class="s1">&#39;examples/gemset/CT&#39;</span>

<span class="c1"># Let&#39;s find out how many files we have to process</span>
<span class="n">gem</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">dir_info</span><span class="p">(</span><span class="n">dicom_data</span><span class="p">)</span>

<span class="c1"># Specify the relevant Dicom attributes we want to extract into a gemset dataset.</span>
<span class="n">dicom_attributes</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;Modality&#39;</span><span class="p">,</span> <span class="s1">&#39;BodyPartExamined&#39;</span><span class="p">,</span> <span class="s1">&#39;StudyDescription&#39;</span><span class="p">,</span> <span class="s1">&#39;SeriesDescription&#39;</span><span class="p">]</span>

<span class="c1"># Time to create Gemicai dataset aka gemset</span>
<span class="c1"># For more information about some of the .dicom_to_gemset options please refer to the documentation</span>
<span class="n">gem</span><span class="o">.</span><span class="n">dicom_to_gemset</span><span class="p">(</span><span class="n">dicom_data</span><span class="p">,</span> <span class="n">gemset_destination</span><span class="p">,</span> <span class="n">dicom_attributes</span><span class="p">,</span> <span class="n">objects_per_file</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>

<span class="c1"># Let&#39;s check whenever we have actually outputted anything</span>
<span class="n">gem</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">dir_info</span><span class="p">(</span><span class="n">gemset_destination</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Extension   |   Files | Size    |
|-------------+---------+---------|
| .dcm.gz     |      49 | 14.3 MB | 

| Extension   |   Files | Size   |
|-------------+---------+--------|
| .gemset     |       2 | 1.9 MB | 

</pre>
</div>
</div>

</div>

</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>Now all that's left is to create an iterator object which is used to access data in a controlled manner.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[19]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Instantiate gemset iterator, the get_dicomo_dataset accepts both a valid .gemset file path as well as a folder </span>
<span class="c1"># location containing arbitary number of gemsets, &#39;labels&#39; parameter specifies which fields except the tensor </span>
<span class="c1"># will be returned by the next(gemset) call, of course any next call should be preceded by an init call which </span>
<span class="c1"># initializes data iterators internal state</span>
<span class="n">gemset</span> <span class="o">=</span> <span class="n">gem</span><span class="o">.</span><span class="n">DicomoDataset</span><span class="o">.</span><span class="n">get_dicomo_dataset</span><span class="p">(</span><span class="n">gemset_destination</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;StudyDescription&#39;</span><span class="p">])</span>

<span class="c1"># Let&#39;s print all of the values that the label &#39;StudyDescription&#39; has in the provided dataset</span>
<span class="n">gemset</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="s1">&#39;StudyDescription&#39;</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Class (StudyDescription)   |   Frequency |
|----------------------------+-------------|
| CT urografie               |          49 |

Total number of training images: 49 
Total number of classes: 1

</pre>
</div>
</div>

</div>

</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>With this we have created an iterator object that can be safely passed to the Gemicai's Classifier class for 
model training or evaluation.</p>

</div>
</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<h2 id="3.2-Tweaking-gemset">3.2 Tweaking gemset<a class="anchor-link" href="#3.2-Tweaking-gemset">&#182;</a></h2><p>To get the most out of your neural network, data selection is very important. That is why Gemicai's iterators 
provide you an extensive ability to pick, split or even modify the dataset.</p>

</div>
</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>Let's assume that one of the images in the previously generated gemset has a wrong Modality assigned to it. Let's change it!</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[20]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># All of the Modality classes should be set to &#39;CT&#39;</span>
<span class="n">gemset</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="s1">&#39;Modality&#39;</span><span class="p">)</span>

<span class="c1"># Let&#39;s modify a third (first index is 0) object in the dataset to have &#39;Modality&#39; set to &#39;MR&#39;</span>
<span class="n">gemset</span><span class="o">.</span><span class="n">modify</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Modality&#39;</span><span class="p">:</span> <span class="s1">&#39;MR&#39;</span><span class="p">})</span>

<span class="c1"># Now there should be two values possible</span>
<span class="n">gemset</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="s1">&#39;Modality&#39;</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Class (Modality)   |   Frequency |
|--------------------+-------------|
| CT                 |          49 |

Total number of training images: 49 
Total number of classes: 1

| Class (Modality)   |   Frequency |
|--------------------+-------------|
| CT                 |          48 |
| MR                 |           1 |

Total number of training images: 49 
Total number of classes: 2

</pre>
</div>
</div>

</div>

</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>As one of the images had a wrong label we would like to omit it in our dataset.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[21]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Creating a substed without &#39;MR&#39; modality</span>
<span class="n">gemset_new</span> <span class="o">=</span> <span class="n">gemset</span><span class="o">.</span><span class="n">subset</span><span class="p">({</span><span class="s1">&#39;Modality&#39;</span><span class="p">:</span> <span class="s1">&#39;CT&#39;</span><span class="p">})</span>

<span class="c1"># gemset_new should contain only &#39;CT&#39; modalities, let&#39;s check whenever this is true</span>
<span class="n">gemset_new</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="s1">&#39;Modality&#39;</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Class (Modality)   |   Frequency |
|--------------------+-------------|
| CT                 |          48 |

Total number of training images: 48 
Total number of classes: 1

</pre>
</div>
</div>

</div>

</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>What is important to remember is that the subset method does not create a new .gemset it simply returns a new iterator which uses original data contraints (if passed) merged with the ones in the subset call. In order to actually save the data we will use the save method.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[31]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Location where we will save our new data set</span>
<span class="n">location</span> <span class="o">=</span> <span class="s1">&#39;temp/main&#39;</span>

<span class="c1"># Let&#39;s create that folder</span>
<span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

<span class="c1"># Save the gemset t othe specified folder</span>
<span class="n">gemset_new</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

<span class="c1"># Let&#39;s check whenever we have actually saved anything</span>
<span class="n">gem</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">dir_info</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Extension   |   Files | Size   |
|-------------+---------+--------|
| .gemset     |       2 | 1.9 MB | 

</pre>
</div>
</div>

</div>

</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>Now let's imagine that we would like to split the resulting dataset further into a train and evaluation data sets, this can be done using a split method.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[32]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Evaluation dataset location</span>
<span class="n">evaluation</span> <span class="o">=</span> <span class="s2">&quot;temp/eval&quot;</span>

<span class="c1"># Train data set location</span>
<span class="n">train</span> <span class="o">=</span> <span class="s2">&quot;temp/train&quot;</span> 

<span class="c1"># Let&#39;s create those fodlers</span>
<span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">evaluation</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>

<span class="c1"># Let&#39;s create interator for the dataset located in &#39;temp/main&#39;</span>
<span class="n">temp_set</span> <span class="o">=</span> <span class="n">gem</span><span class="o">.</span><span class="n">DicomoDataset</span><span class="o">.</span><span class="n">get_dicomo_dataset</span><span class="p">(</span><span class="n">location</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;StudyDescription&#39;</span><span class="p">])</span>

<span class="c1"># Time to split it into a training and evaluation sets using a ratio of 8:2, so training set will contain ~80% of</span>
<span class="c1"># temp_set&#39;s data, where as the evaluation set will get the remaining ~20%.</span>
<span class="n">temp_set</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">sets</span><span class="o">=</span><span class="p">{</span><span class="n">train</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">,</span> <span class="n">evaluation</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">})</span>

<span class="c1"># Let&#39;s check whenever our previous assumption is correct</span>
<span class="n">eval_dataset</span> <span class="o">=</span> <span class="n">gem</span><span class="o">.</span><span class="n">DicomoDataset</span><span class="o">.</span><span class="n">get_dicomo_dataset</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;StudyDescription&#39;</span><span class="p">])</span>
<span class="n">train_dataset</span> <span class="o">=</span> <span class="n">gem</span><span class="o">.</span><span class="n">DicomoDataset</span><span class="o">.</span><span class="n">get_dicomo_dataset</span><span class="p">(</span><span class="n">evaluation</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;StudyDescription&#39;</span><span class="p">])</span>

<span class="n">eval_dataset</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="s1">&#39;Modality&#39;</span><span class="p">)</span>
<span class="n">train_dataset</span><span class="o">.</span><span class="n">summarize</span><span class="p">(</span><span class="s1">&#39;Modality&#39;</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Class (Modality)   |   Frequency |
|--------------------+-------------|
| CT                 |          38 |

Total number of training images: 38 
Total number of classes: 1

| Class (Modality)   |   Frequency |
|--------------------+-------------|
| CT                 |          10 |

Total number of training images: 10 
Total number of classes: 1

</pre>
</div>
</div>

</div>

</div>

</div>
<div class="jp-Cell-inputWrapper"><div class="jp-InputPrompt jp-InputArea-prompt">
</div><div class="jp-RenderedHTMLCommon jp-RenderedMarkdown jp-MarkdownOutput " data-mime-type="text/markdown">
<p>We are slowly creating too many datasets, it's time to remove them using the erase method.</p>

</div>
</div><div class="jp-Cell jp-CodeCell jp-Notebook-cell   ">
<div class="jp-Cell-inputWrapper">
<div class="jp-InputArea jp-Cell-inputArea">
<div class="jp-InputPrompt jp-InputArea-prompt">In&nbsp;[33]:</div>
<div class="jp-CodeMirrorEditor jp-Editor jp-InputArea-editor" data-type="inline">
     <div class="CodeMirror cm-s-jupyter">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># Folder should contain a gemicai dataset</span>
<span class="n">gem</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">dir_info</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

<span class="c1"># Time to remove all of the datasets we have created</span>
<span class="n">temp_set</span><span class="o">.</span><span class="n">erase</span><span class="p">()</span>
<span class="n">eval_dataset</span><span class="o">.</span><span class="n">erase</span><span class="p">()</span>
<span class="n">train_dataset</span><span class="o">.</span><span class="n">erase</span><span class="p">()</span>

<span class="c1"># It should be empty now</span>
<span class="n">gem</span><span class="o">.</span><span class="n">utils</span><span class="o">.</span><span class="n">dir_info</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>

<span class="c1"># Remove the empty folders</span>
<span class="n">os</span><span class="o">.</span><span class="n">rmdir</span><span class="p">(</span><span class="n">location</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">rmdir</span><span class="p">(</span><span class="n">evaluation</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">rmdir</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">rmdir</span><span class="p">(</span><span class="s1">&#39;temp&#39;</span><span class="p">)</span>
</pre></div>

     </div>
</div>
</div>
</div>

<div class="jp-Cell-outputWrapper">


<div class="jp-OutputArea jp-Cell-outputArea">

<div class="jp-OutputArea-child">

    
    <div class="jp-OutputPrompt jp-OutputArea-prompt"></div>


<div class="jp-RenderedText jp-OutputArea-output" data-mime-type="text/plain">
<pre>| Extension   |   Files | Size   |
|-------------+---------+--------|
| .gemset     |       2 | 1.9 MB | 

| Extension   | Files   | Size   |
|-------------+---------+--------| 

</pre>
</div>
</div>

</div>

</div>

</div>
</body>







</html>
